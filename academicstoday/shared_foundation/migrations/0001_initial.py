# -*- coding: utf-8 -*-
# Generated by Django 1.11.5 on 2017-09-19 01:34
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django_tenants.postgresql_backend.base
import shared_foundation.models.profile
import shared_foundation.utils


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='SharedProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('last_modified', models.DateTimeField(auto_now=True, db_index=True)),
                ('salt', models.CharField(blank=True, default=shared_foundation.utils.generate_hash, help_text='The unique salt value associated with this object.', max_length=127, null=True, unique=True, verbose_name='Salt')),
                ('pr_access_code', models.CharField(blank=True, default=shared_foundation.utils.generate_hash, help_text='The access code to enter the password reset page to be granted access to restart your password.', max_length=127, verbose_name='Password Reset Access Code')),
                ('pr_expiry_date', models.DateTimeField(blank=True, default=shared_foundation.models.profile.get_expiry_date, help_text='The date where the access code expires and no longer works.', verbose_name='Password Reset Access Code Expiry Date')),
                ('user', models.OneToOneField(blank=True, help_text='The user whom belongs to this profile.', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Profile',
                'verbose_name_plural': 'Profiles',
                'db_table': 'at_shared_profiles',
            },
        ),
        migrations.CreateModel(
            name='SharedUniveristyDomain',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('domain', models.CharField(db_index=True, max_length=253, unique=True)),
                ('is_primary', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'Domain',
                'verbose_name_plural': 'Domains',
                'db_table': 'at_shared_domains',
            },
        ),
        migrations.CreateModel(
            name='SharedUniversity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('schema_name', models.CharField(max_length=63, unique=True, validators=[django_tenants.postgresql_backend.base._check_schema_name])),
                ('alternate_name', models.CharField(blank=True, help_text='An alias for the item.', max_length=255, null=True, verbose_name='Alternate Name')),
                ('description', models.TextField(blank=True, help_text='A short description of the item.', null=True, verbose_name='Description')),
                ('main_entity_of_page', models.URLField(blank=True, help_text='Indicates a page for which this thing is the main entity being described.', null=True, verbose_name='Main Entity Of Page')),
                ('name', models.CharField(blank=True, help_text='The name of the item.', max_length=255, null=True, verbose_name='Name')),
                ('same_as', models.URLField(blank=True, help_text="URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia page, Freebase page, or official website.", null=True, verbose_name='Same As')),
                ('url', models.URLField(blank=True, help_text='URL of the item.', null=True, verbose_name='URL')),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('last_modified', models.DateTimeField(auto_now=True, db_index=True)),
                ('administrators', models.ManyToManyField(blank=True, help_text='The users who are office staff and administrators of this university.', related_name='shared_foundation_shareduniversity_staff_related', to=settings.AUTH_USER_MODEL)),
                ('owner', models.ForeignKey(blank=True, help_text='The user whom owns this thing.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='shared_foundation_shareduniversity_abstract_public_thing_owner_related', to=settings.AUTH_USER_MODEL)),
                ('students', models.ManyToManyField(blank=True, help_text='The users who are students in this university.', related_name='shared_foundation_shareduniversity_students_related', to=settings.AUTH_USER_MODEL)),
                ('teachers', models.ManyToManyField(blank=True, help_text='The users who are teachers in this university.', related_name='shared_foundation_shareduniversity_teachers_related', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'University',
                'verbose_name_plural': 'Universities',
                'db_table': 'at_shared_universities',
            },
        ),
        migrations.CreateModel(
            name='SharedUniversityRegistration',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('alternate_name', models.CharField(blank=True, help_text='An alias for the item.', max_length=255, null=True, verbose_name='Alternate Name')),
                ('description', models.TextField(blank=True, help_text='A short description of the item.', null=True, verbose_name='Description')),
                ('main_entity_of_page', models.URLField(blank=True, help_text='Indicates a page for which this thing is the main entity being described.', null=True, verbose_name='Main Entity Of Page')),
                ('same_as', models.URLField(blank=True, help_text="URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia page, Freebase page, or official website.", null=True, verbose_name='Same As')),
                ('url', models.URLField(blank=True, help_text='URL of the item.', null=True, verbose_name='URL')),
                ('schema_name', models.CharField(blank=True, help_text='The official name of the organization, e.g. the registered company name.', max_length=255, null=True, verbose_name='Legal Name')),
                ('name', models.CharField(blank=True, help_text='The official name of the organization, e.g. the registered company name.', max_length=255, null=True, verbose_name='Legal Name')),
                ('owner', models.ForeignKey(blank=True, help_text='The user whom owns this thing.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='shared_foundation_shareduniversityregistration_abstract_public_thing_owner_related', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'University Registration',
                'verbose_name_plural': 'University Registrations',
                'db_table': 'at_shared_univeristy_registrations',
            },
        ),
        migrations.AddField(
            model_name='shareduniveristydomain',
            name='tenant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='domains', to='shared_foundation.SharedUniversity'),
        ),
    ]
